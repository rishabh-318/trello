{"ast":null,"code":"const API_BASE = process.env.REACT_APP_BASE_URL;\n\n// Centralized response checker\nconst checkResponse = async res => {\n  if (!res.ok) {\n    let errorData = {};\n    try {\n      errorData = await res.json();\n    } catch {\n      errorData.error = \"Unknown error\";\n    }\n    throw new Error(errorData.error || \"API request failed\");\n  }\n  try {\n    return await res.json();\n  } catch {\n    return {}; // fallback for DELETE with no body\n  }\n};\n\n// GET all tasks for a board\nexport const fetchTasksForBoard = async boardId => {\n  const res = await fetch(`${API_BASE}/boards/${boardId}/tasks`);\n  return checkResponse(res);\n};\n\n// POST a new task to a board\nexport const createTask = async (boardId, taskData) => {\n  const res = await fetch(`${API_BASE}/boards/${boardId}/tasks`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(taskData)\n  });\n  return checkResponse(res);\n};\n\n// PUT update task by ID\nexport const updateTask = async (taskId, updatedData) => {\n  const res = await fetch(`${API_BASE}/tasks/${taskId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(updatedData)\n  });\n  return checkResponse(res);\n};\n\n// DELETE task by ID\nexport const deleteTask = async taskId => {\n  const res = await fetch(`${API_BASE}/tasks/${taskId}`, {\n    method: \"DELETE\"\n  });\n  return checkResponse(res); // returns {} if no JSON body\n};","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_BASE_URL","checkResponse","res","ok","errorData","json","error","Error","fetchTasksForBoard","boardId","fetch","createTask","taskData","method","headers","body","JSON","stringify","updateTask","taskId","updatedData","deleteTask"],"sources":["C:/Users/Intel/Desktop/programs/scriptGuru/trello/src/api/tasks.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_BASE_URL;\r\n\r\n// Centralized response checker\r\nconst checkResponse = async (res) => {\r\n  if (!res.ok) {\r\n    let errorData = {};\r\n    try {\r\n      errorData = await res.json();\r\n    } catch {\r\n      errorData.error = \"Unknown error\";\r\n    }\r\n    throw new Error(errorData.error || \"API request failed\");\r\n  }\r\n\r\n  try {\r\n    return await res.json();\r\n  } catch {\r\n    return {}; // fallback for DELETE with no body\r\n  }\r\n};\r\n\r\n// GET all tasks for a board\r\nexport const fetchTasksForBoard = async (boardId) => {\r\n  const res = await fetch(`${API_BASE}/boards/${boardId}/tasks`);\r\n  return checkResponse(res);\r\n};\r\n\r\n// POST a new task to a board\r\nexport const createTask = async (boardId, taskData) => {\r\n  const res = await fetch(`${API_BASE}/boards/${boardId}/tasks`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(taskData),\r\n  });\r\n  return checkResponse(res);\r\n};\r\n\r\n// PUT update task by ID\r\nexport const updateTask = async (taskId, updatedData) => {\r\n  const res = await fetch(`${API_BASE}/tasks/${taskId}`, {\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(updatedData),\r\n  });\r\n  return checkResponse(res);\r\n};\r\n\r\n// DELETE task by ID\r\nexport const deleteTask = async (taskId) => {\r\n  const res = await fetch(`${API_BASE}/tasks/${taskId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n  return checkResponse(res); // returns {} if no JSON body\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB;;AAE/C;AACA,MAAMC,aAAa,GAAG,MAAOC,GAAG,IAAK;EACnC,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;IACX,IAAIC,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI;MACFA,SAAS,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,MAAM;MACND,SAAS,CAACE,KAAK,GAAG,eAAe;IACnC;IACA,MAAM,IAAIC,KAAK,CAACH,SAAS,CAACE,KAAK,IAAI,oBAAoB,CAAC;EAC1D;EAEA,IAAI;IACF,OAAO,MAAMJ,GAAG,CAACG,IAAI,CAAC,CAAC;EACzB,CAAC,CAAC,MAAM;IACN,OAAO,CAAC,CAAC,CAAC,CAAC;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,kBAAkB,GAAG,MAAOC,OAAO,IAAK;EACnD,MAAMP,GAAG,GAAG,MAAMQ,KAAK,CAAC,GAAGb,QAAQ,WAAWY,OAAO,QAAQ,CAAC;EAC9D,OAAOR,aAAa,CAACC,GAAG,CAAC;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG,MAAAA,CAAOF,OAAO,EAAEG,QAAQ,KAAK;EACrD,MAAMV,GAAG,GAAG,MAAMQ,KAAK,CAAC,GAAGb,QAAQ,WAAWY,OAAO,QAAQ,EAAE;IAC7DI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;EAC/B,CAAC,CAAC;EACF,OAAOX,aAAa,CAACC,GAAG,CAAC;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMgB,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EACvD,MAAMlB,GAAG,GAAG,MAAMQ,KAAK,CAAC,GAAGb,QAAQ,UAAUsB,MAAM,EAAE,EAAE;IACrDN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW;EAClC,CAAC,CAAC;EACF,OAAOnB,aAAa,CAACC,GAAG,CAAC;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMmB,UAAU,GAAG,MAAOF,MAAM,IAAK;EAC1C,MAAMjB,GAAG,GAAG,MAAMQ,KAAK,CAAC,GAAGb,QAAQ,UAAUsB,MAAM,EAAE,EAAE;IACrDN,MAAM,EAAE;EACV,CAAC,CAAC;EACF,OAAOZ,aAAa,CAACC,GAAG,CAAC,CAAC,CAAC;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}