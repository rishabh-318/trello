{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Intel\\\\Desktop\\\\programs\\\\scriptGuru\\\\trello\\\\src\\\\pages\\\\TeamCollaborationBoard.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n\n// const API_BASE = \"http://localhost:5000\";\n\n// // Priority colors\n// const PRIORITY_COLORS = {\n//   Low: \"#28a745\",\n//   Medium: \"#ffc107\",\n//   High: \"#dc3545\",\n// };\n\n// // Board component\n// const Board = ({ board, onSelect, isSelected }) => (\n//   <div\n//     style={{\n//       ...styles.boardItem,\n//       ...(isSelected ? styles.boardItemSelected : {}),\n//     }}\n//     onClick={() => onSelect(board)}\n//   >\n//     <h4>{board.name}</h4>\n//     {board.description && <p>{board.description}</p>}\n//   </div>\n// );\n\n// // Task component\n// const Task = ({ task, onUpdate, onDelete }) => {\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editData, setEditData] = useState({\n//     title: task.title,\n//     description: task.description,\n//     priority: task.priority,\n//     assignedTo: task.assignedTo,\n//     dueDate: task.dueDate ? task.dueDate.split(\"T\")[0] : \"\",\n//   });\n\n//   const handleSave = async () => {\n//     try {\n//       const response = await fetch(`${API_BASE}/tasks/${task._id}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(editData),\n//       });\n\n//       if (response.ok) {\n//         const updatedTask = await response.json();\n//         onUpdate(updatedTask);\n//         setIsEditing(false);\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating task:\", error);\n//     }\n//   };\n\n//   const handleStatusChange = async (newStatus) => {\n//     try {\n//       const response = await fetch(`${API_BASE}/tasks/${task._id}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ status: newStatus }),\n//       });\n\n//       if (response.ok) {\n//         const updatedTask = await response.json();\n//         onUpdate(updatedTask);\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating task status:\", error);\n//     }\n//   };\n\n//   const handleDelete = async () => {\n//     if (window.confirm(\"Are you sure you want to delete this task?\")) {\n//       try {\n//         await fetch(`${API_BASE}/tasks/${task._id}`, { method: \"DELETE\" });\n//         onDelete(task._id);\n//       } catch (error) {\n//         console.error(\"Error deleting task:\", error);\n//       }\n//     }\n//   };\n\n//   if (isEditing) {\n//     return (\n//       <div style={{ ...styles.task, ...styles.taskEditing }}>\n//         <input\n//           type=\"text\"\n//           value={editData.title}\n//           onChange={(e) => setEditData({ ...editData, title: e.target.value })}\n//           placeholder=\"Task title\"\n//           style={styles.input}\n//         />\n//         <textarea\n//           value={editData.description}\n//           onChange={(e) =>\n//             setEditData({ ...editData, description: e.target.value })\n//           }\n//           placeholder=\"Description\"\n//           style={styles.textarea}\n//         />\n//         <select\n//           value={editData.priority}\n//           onChange={(e) =>\n//             setEditData({ ...editData, priority: e.target.value })\n//           }\n//           style={styles.select}\n//         >\n//           <option value=\"Low\">Low</option>\n//           <option value=\"Medium\">Medium</option>\n//           <option value=\"High\">High</option>\n//         </select>\n//         <input\n//           type=\"text\"\n//           value={editData.assignedTo}\n//           onChange={(e) =>\n//             setEditData({ ...editData, assignedTo: e.target.value })\n//           }\n//           placeholder=\"Assigned to\"\n//           style={styles.input}\n//         />\n//         <input\n//           type=\"date\"\n//           value={editData.dueDate}\n//           onChange={(e) =>\n//             setEditData({ ...editData, dueDate: e.target.value })\n//           }\n//           style={styles.input}\n//         />\n//         <div style={styles.taskActions}>\n//           <button onClick={handleSave} style={styles.button}>\n//             Save\n//           </button>\n//           <button\n//             onClick={() => setIsEditing(false)}\n//             style={styles.buttonSecondary}\n//           >\n//             Cancel\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div style={styles.task}>\n//       <div style={styles.taskHeader}>\n//         <h4>{task.title}</h4>\n//         <span\n//           style={{\n//             ...styles.priorityBadge,\n//             backgroundColor: PRIORITY_COLORS[task.priority],\n//           }}\n//         >\n//           {task.priority}\n//         </span>\n//       </div>\n//       {task.description && <p>{task.description}</p>}\n//       {task.assignedTo && (\n//         <div style={styles.assignedTo}>👤 {task.assignedTo}</div>\n//       )}\n//       {task.dueDate && (\n//         <div style={styles.dueDate}>\n//           📅 {new Date(task.dueDate).toLocaleDateString()}\n//         </div>\n//       )}\n\n//       <div style={styles.taskControls}>\n//         <select\n//           value={task.status}\n//           onChange={(e) => handleStatusChange(e.target.value)}\n//           style={styles.select}\n//         >\n//           <option value=\"To Do\">To Do</option>\n//           <option value=\"In Progress\">In Progress</option>\n//           <option value=\"Done\">Done</option>\n//         </select>\n//         <button onClick={() => setIsEditing(true)} style={styles.button}>\n//           Edit\n//         </button>\n//         <button onClick={handleDelete} style={styles.buttonDanger}>\n//           Delete\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Column component\n// const Column = ({ title, tasks, onUpdateTask, onDeleteTask }) => (\n//   <div style={styles.column}>\n//     <h3>{title}</h3>\n//     <div style={styles.tasks}>\n//       {tasks.map((task) => (\n//         <Task\n//           key={task._id}\n//           task={task}\n//           onUpdate={onUpdateTask}\n//           onDelete={onDeleteTask}\n//         />\n//       ))}\n//     </div>\n//   </div>\n// );\n\n// // New Task Form\n// const NewTaskForm = ({ boardId, onTaskCreated }) => {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [taskData, setTaskData] = useState({\n//     title: \"\",\n//     description: \"\",\n//     status: \"To Do\",\n//     priority: \"Medium\",\n//     assignedTo: \"\",\n//     dueDate: \"\",\n//   });\n\n//   const handleSubmit = async () => {\n//     if (!taskData.title.trim()) return;\n\n//     try {\n//       const response = await fetch(`${API_BASE}/boards/${boardId}/tasks`, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(taskData),\n//       });\n\n//       if (response.ok) {\n//         const newTask = await response.json();\n//         onTaskCreated(newTask);\n//         setTaskData({\n//           title: \"\",\n//           description: \"\",\n//           status: \"To Do\",\n//           priority: \"Medium\",\n//           assignedTo: \"\",\n//           dueDate: \"\",\n//         });\n//         setIsOpen(false);\n//       }\n//     } catch (error) {\n//       console.error(\"Error creating task:\", error);\n//     }\n//   };\n\n//   if (!isOpen) {\n//     return (\n//       <button style={styles.newTaskBtn} onClick={() => setIsOpen(true)}>\n//         + Add New Task\n//       </button>\n//     );\n//   }\n\n//   return (\n//     <div style={styles.newTaskForm}>\n//       <input\n//         type=\"text\"\n//         value={taskData.title}\n//         onChange={(e) => setTaskData({ ...taskData, title: e.target.value })}\n//         placeholder=\"Task title\"\n//         style={styles.input}\n//       />\n//       <textarea\n//         value={taskData.description}\n//         onChange={(e) =>\n//           setTaskData({ ...taskData, description: e.target.value })\n//         }\n//         placeholder=\"Description\"\n//         style={styles.textarea}\n//       />\n//       <select\n//         value={taskData.status}\n//         onChange={(e) => setTaskData({ ...taskData, status: e.target.value })}\n//         style={styles.select}\n//       >\n//         <option value=\"To Do\">To Do</option>\n//         <option value=\"In Progress\">In Progress</option>\n//         <option value=\"Done\">Done</option>\n//       </select>\n//       <select\n//         value={taskData.priority}\n//         onChange={(e) => setTaskData({ ...taskData, priority: e.target.value })}\n//         style={styles.select}\n//       >\n//         <option value=\"Low\">Low</option>\n//         <option value=\"Medium\">Medium</option>\n//         <option value=\"High\">High</option>\n//       </select>\n//       <input\n//         type=\"text\"\n//         value={taskData.assignedTo}\n//         onChange={(e) =>\n//           setTaskData({ ...taskData, assignedTo: e.target.value })\n//         }\n//         placeholder=\"Assigned to\"\n//         style={styles.input}\n//       />\n//       <input\n//         type=\"date\"\n//         value={taskData.dueDate}\n//         onChange={(e) => setTaskData({ ...taskData, dueDate: e.target.value })}\n//         style={styles.input}\n//       />\n//       <div style={styles.formActions}>\n//         <button onClick={handleSubmit} style={styles.button}>\n//           Create Task\n//         </button>\n//         <button onClick={() => setIsOpen(false)} style={styles.buttonSecondary}>\n//           Cancel\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// // New Board Form\n// const NewBoardForm = ({ onBoardCreated }) => {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [boardData, setBoardData] = useState({ name: \"\", description: \"\" });\n\n//   const handleSubmit = async () => {\n//     if (!boardData.name.trim()) return;\n\n//     try {\n//       const response = await fetch(`${API_BASE}/boards`, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(boardData),\n//       });\n\n//       if (response.ok) {\n//         const newBoard = await response.json();\n//         onBoardCreated(newBoard);\n//         setBoardData({ name: \"\", description: \"\" });\n//         setIsOpen(false);\n//       }\n//     } catch (error) {\n//       console.error(\"Error creating board:\", error);\n//     }\n//   };\n\n//   if (!isOpen) {\n//     return (\n//       <button style={styles.newBoardBtn} onClick={() => setIsOpen(true)}>\n//         + New Board\n//       </button>\n//     );\n//   }\n\n//   return (\n//     <div style={styles.newBoardForm}>\n//       <input\n//         type=\"text\"\n//         value={boardData.name}\n//         onChange={(e) => setBoardData({ ...boardData, name: e.target.value })}\n//         placeholder=\"Board name\"\n//         style={styles.input}\n//       />\n//       <textarea\n//         value={boardData.description}\n//         onChange={(e) =>\n//           setBoardData({ ...boardData, description: e.target.value })\n//         }\n//         placeholder=\"Board description\"\n//         style={styles.textarea}\n//       />\n//       <div style={styles.formActions}>\n//         <button onClick={handleSubmit} style={styles.button}>\n//           Create Board\n//         </button>\n//         <button onClick={() => setIsOpen(false)} style={styles.buttonSecondary}>\n//           Cancel\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// const TeamCollaborationBoard = () => {\n//   const [boards, setBoards] = useState([]);\n//   const [selectedBoard, setSelectedBoard] = useState(null);\n//   const [tasks, setTasks] = useState([]);\n//   const [sidebarOpen, setSidebarOpen] = useState(true);\n\n//   // Load boards on mount\n//   useEffect(() => {\n//     const fetchBoards = async () => {\n//       try {\n//         const response = await fetch(`${API_BASE}/boards`);\n//         const data = await response.json();\n//         setBoards(data);\n\n//         // Auto-select first board if available\n//         if (data.length > 0 && !selectedBoard) {\n//           setSelectedBoard(data[0]);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching boards:\", error);\n//       }\n//     };\n\n//     fetchBoards();\n//   }, [selectedBoard]);\n\n//   // Load tasks when board is selected\n//   useEffect(() => {\n//     if (selectedBoard) {\n//       const fetchTasks = async () => {\n//         try {\n//           const response = await fetch(\n//             `${API_BASE}/boards/${selectedBoard._id}/tasks`\n//           );\n//           const data = await response.json();\n//           setTasks(data);\n//         } catch (error) {\n//           console.error(\"Error fetching tasks:\", error);\n//         }\n//       };\n\n//       fetchTasks();\n//     }\n//   }, [selectedBoard]);\n\n//   const handleBoardSelect = (board) => {\n//     setSelectedBoard(board);\n//   };\n\n//   const handleBoardCreated = (newBoard) => {\n//     setBoards([newBoard, ...boards]);\n//     setSelectedBoard(newBoard);\n//   };\n\n//   const handleTaskCreated = (newTask) => {\n//     setTasks([newTask, ...tasks]);\n//   };\n\n//   const handleTaskUpdate = (updatedTask) => {\n//     setTasks(\n//       tasks.map((task) => (task._id === updatedTask._id ? updatedTask : task))\n//     );\n//   };\n\n//   const handleTaskDelete = (taskId) => {\n//     setTasks(tasks.filter((task) => task._id !== taskId));\n//   };\n\n//   const todoTasks = tasks.filter((task) => task.status === \"To Do\");\n//   const inProgressTasks = tasks.filter((task) => task.status === \"In Progress\");\n//   const doneTasks = tasks.filter((task) => task.status === \"Done\");\n\n//   return (\n//     <div style={styles.app}>\n//       <div\n//         style={{\n//           ...styles.sidebar,\n//           ...(sidebarOpen ? styles.sidebarOpen : styles.sidebarClosed),\n//         }}\n//       >\n//         <div style={styles.sidebarHeader}>\n//           <h2>Boards</h2>\n//           <button\n//             style={styles.sidebarToggle}\n//             onClick={() => setSidebarOpen(!sidebarOpen)}\n//           >\n//             {sidebarOpen ? \"←\" : \"→\"}\n//           </button>\n//         </div>\n\n//         {sidebarOpen && (\n//           <div style={styles.sidebarContent}>\n//             <NewBoardForm onBoardCreated={handleBoardCreated} />\n//             <div style={styles.boardsList}>\n//               {boards.map((board) => (\n//                 <Board\n//                   key={board._id}\n//                   board={board}\n//                   onSelect={handleBoardSelect}\n//                   isSelected={selectedBoard?._id === board._id}\n//                 />\n//               ))}\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       <div style={styles.mainContent}>\n//         {selectedBoard ? (\n//           <>\n//             <div style={styles.boardHeader}>\n//               <h1>{selectedBoard.name}</h1>\n//               {selectedBoard.description && <p>{selectedBoard.description}</p>}\n//               <NewTaskForm\n//                 boardId={selectedBoard._id}\n//                 onTaskCreated={handleTaskCreated}\n//               />\n//             </div>\n\n//             <div style={styles.boardColumns}>\n//               <Column\n//                 title=\"To Do\"\n//                 tasks={todoTasks}\n//                 onUpdateTask={handleTaskUpdate}\n//                 onDeleteTask={handleTaskDelete}\n//               />\n//               <Column\n//                 title=\"In Progress\"\n//                 tasks={inProgressTasks}\n//                 onUpdateTask={handleTaskUpdate}\n//                 onDeleteTask={handleTaskDelete}\n//               />\n//               <Column\n//                 title=\"Done\"\n//                 tasks={doneTasks}\n//                 onUpdateTask={handleTaskUpdate}\n//                 onDeleteTask={handleTaskDelete}\n//               />\n//             </div>\n//           </>\n//         ) : (\n//           <div style={styles.noBoard}>\n//             <h2>Welcome to Team Collaboration Board</h2>\n//             <p>\n//               Select a board from the sidebar or create a new one to get\n//               started!\n//             </p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// const styles = {\n//   app: {\n//     display: \"flex\",\n//     height: \"100vh\",\n//     fontFamily: \"Arial, sans-serif\",\n//     backgroundColor: \"#f5f5f5\",\n//   },\n//   sidebar: {\n//     backgroundColor: \"#2c3e50\",\n//     color: \"white\",\n//     transition: \"width 0.3s ease\",\n//   },\n//   sidebarOpen: {\n//     width: \"300px\",\n//   },\n//   sidebarClosed: {\n//     width: \"60px\",\n//   },\n//   sidebarHeader: {\n//     display: \"flex\",\n//     justifyContent: \"space-between\",\n//     alignItems: \"center\",\n//     padding: \"20px\",\n//     borderBottom: \"1px solid #34495e\",\n//   },\n//   sidebarToggle: {\n//     background: \"none\",\n//     border: \"none\",\n//     color: \"white\",\n//     fontSize: \"18px\",\n//     cursor: \"pointer\",\n//   },\n//   sidebarContent: {\n//     padding: \"20px\",\n//   },\n//   boardsList: {\n//     marginTop: \"20px\",\n//   },\n//   boardItem: {\n//     padding: \"15px\",\n//     margin: \"10px 0\",\n//     backgroundColor: \"#34495e\",\n//     borderRadius: \"5px\",\n//     cursor: \"pointer\",\n//     transition: \"background-color 0.2s\",\n//   },\n//   boardItemSelected: {\n//     backgroundColor: \"#3498db\",\n//   },\n//   mainContent: {\n//     flex: 1,\n//     padding: \"20px\",\n//     overflow: \"auto\",\n//   },\n//   boardHeader: {\n//     marginBottom: \"30px\",\n//   },\n//   boardColumns: {\n//     display: \"flex\",\n//     gap: \"20px\",\n//     height: \"calc(100vh - 200px)\",\n//   },\n//   column: {\n//     flex: 1,\n//     backgroundColor: \"#ecf0f1\",\n//     borderRadius: \"8px\",\n//     padding: \"20px\",\n//     minHeight: \"500px\",\n//   },\n//   tasks: {\n//     marginTop: \"15px\",\n//   },\n//   task: {\n//     backgroundColor: \"white\",\n//     padding: \"15px\",\n//     marginBottom: \"10px\",\n//     borderRadius: \"5px\",\n//     boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\n//   },\n//   taskEditing: {\n//     border: \"2px solid #3498db\",\n//   },\n//   taskHeader: {\n//     display: \"flex\",\n//     justifyContent: \"space-between\",\n//     alignItems: \"center\",\n//     marginBottom: \"10px\",\n//   },\n//   priorityBadge: {\n//     padding: \"4px 8px\",\n//     borderRadius: \"12px\",\n//     fontSize: \"12px\",\n//     fontWeight: \"bold\",\n//     color: \"white\",\n//   },\n//   assignedTo: {\n//     fontSize: \"14px\",\n//     color: \"#666\",\n//     marginBottom: \"5px\",\n//   },\n//   dueDate: {\n//     fontSize: \"14px\",\n//     color: \"#666\",\n//     marginBottom: \"10px\",\n//   },\n//   taskControls: {\n//     display: \"flex\",\n//     gap: \"10px\",\n//     marginTop: \"10px\",\n//   },\n//   taskActions: {\n//     display: \"flex\",\n//     gap: \"10px\",\n//     marginTop: \"10px\",\n//   },\n//   newTaskBtn: {\n//     backgroundColor: \"#27ae60\",\n//     color: \"white\",\n//     border: \"none\",\n//     padding: \"12px 20px\",\n//     borderRadius: \"5px\",\n//     cursor: \"pointer\",\n//     fontSize: \"16px\",\n//   },\n//   newBoardBtn: {\n//     backgroundColor: \"#3498db\",\n//     color: \"white\",\n//     border: \"none\",\n//     padding: \"12px 20px\",\n//     borderRadius: \"5px\",\n//     cursor: \"pointer\",\n//     fontSize: \"16px\",\n//     width: \"100%\",\n//   },\n//   newTaskForm: {\n//     backgroundColor: \"white\",\n//     padding: \"20px\",\n//     borderRadius: \"8px\",\n//     boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\n//     marginBottom: \"20px\",\n//   },\n//   newBoardForm: {\n//     backgroundColor: \"#34495e\",\n//     padding: \"15px\",\n//     borderRadius: \"5px\",\n//     marginBottom: \"20px\",\n//   },\n//   input: {\n//     width: \"100%\",\n//     padding: \"10px\",\n//     marginBottom: \"10px\",\n//     border: \"1px solid #ddd\",\n//     borderRadius: \"4px\",\n//     fontSize: \"14px\",\n//   },\n//   textarea: {\n//     width: \"100%\",\n//     padding: \"10px\",\n//     marginBottom: \"10px\",\n//     border: \"1px solid #ddd\",\n//     borderRadius: \"4px\",\n//     fontSize: \"14px\",\n//     minHeight: \"80px\",\n//     resize: \"vertical\",\n//   },\n//   select: {\n//     padding: \"8px\",\n//     marginRight: \"10px\",\n//     border: \"1px solid #ddd\",\n//     borderRadius: \"4px\",\n//     fontSize: \"14px\",\n//   },\n//   formActions: {\n//     display: \"flex\",\n//     gap: \"10px\",\n//     marginTop: \"15px\",\n//   },\n//   button: {\n//     backgroundColor: \"#3498db\",\n//     color: \"white\",\n//     border: \"none\",\n//     padding: \"8px 16px\",\n//     borderRadius: \"4px\",\n//     cursor: \"pointer\",\n//     fontSize: \"14px\",\n//   },\n//   buttonSecondary: {\n//     backgroundColor: \"#95a5a6\",\n//     color: \"white\",\n//     border: \"none\",\n//     padding: \"8px 16px\",\n//     borderRadius: \"4px\",\n//     cursor: \"pointer\",\n//     fontSize: \"14px\",\n//   },\n//   buttonDanger: {\n//     backgroundColor: \"#e74c3c\",\n//     color: \"white\",\n//     border: \"none\",\n//     padding: \"8px 16px\",\n//     borderRadius: \"4px\",\n//     cursor: \"pointer\",\n//     fontSize: \"14px\",\n//   },\n//   noBoard: {\n//     textAlign: \"center\",\n//     padding: \"50px\",\n//     color: \"#7f8c8d\",\n//   },\n// };\n\n// export default TeamCollaborationBoard;\n\n// File: src/pages/TeamCollaborationBoard.js\nimport React, { useEffect, useState } from \"react\";\nimport BoardList from \"../components/BoardList/BoardList\";\nimport TaskForm from \"../components/TaskForm/TaskForm\";\nimport Column from \"../components/Column/Column\";\nimport BoardForm from \"../components/BoardForm/BoardForm\";\nimport { fetchBoards } from \"../api/boards\";\nimport { fetchTasksForBoard } from \"../api/tasks\";\nimport \"../styles/styles.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TeamCollaborationBoard = () => {\n  _s();\n  const [boards, setBoards] = useState([]);\n  const [selectedBoard, setSelectedBoard] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  useEffect(() => {\n    const loadBoards = async () => {\n      const boards = await fetchBoards();\n      setBoards(boards);\n      if (boards.length > 0 && !selectedBoard) setSelectedBoard(boards[0]);\n    };\n    loadBoards();\n  }, [selectedBoard]);\n  useEffect(() => {\n    const loadTasks = async () => {\n      if (!selectedBoard) return;\n      const data = await fetchTasksForBoard(selectedBoard._id);\n      setTasks(data);\n    };\n    loadTasks();\n  }, [selectedBoard]);\n  const handleBoardCreated = newBoard => {\n    setBoards([newBoard, ...boards]);\n    setSelectedBoard(newBoard);\n  };\n  const handleTaskCreated = newTask => setTasks([newTask, ...tasks]);\n  const handleTaskUpdate = updatedTask => setTasks(tasks.map(t => t._id === updatedTask._id ? updatedTask : t));\n  const handleTaskDelete = taskId => setTasks(tasks.filter(task => task._id !== taskId));\n  const filteredTasks = status => tasks.filter(task => task.status === status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sidebar ${sidebarOpen ? \"open\" : \"closed\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Boards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sidebar-toggle\",\n          onClick: () => setSidebarOpen(!sidebarOpen),\n          children: sidebarOpen ? \"←\" : \"→\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 9\n      }, this), sidebarOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar-content\",\n        children: [/*#__PURE__*/_jsxDEV(BoardForm, {\n          onBoardCreated: handleBoardCreated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BoardList, {\n          boards: boards,\n          onSelect: setSelectedBoard,\n          selectedBoard: selectedBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: selectedBoard ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: selectedBoard.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 15\n          }, this), selectedBoard.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selectedBoard.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 824,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n            boardId: selectedBoard._id,\n            onTaskCreated: handleTaskCreated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 825,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-columns\",\n          children: [\"To Do\", \"In Progress\", \"Done\"].map(status => /*#__PURE__*/_jsxDEV(Column, {\n            title: status,\n            tasks: filteredTasks(status),\n            onUpdateTask: handleTaskUpdate,\n            onDeleteTask: handleTaskDelete\n          }, status, false, {\n            fileName: _jsxFileName,\n            lineNumber: 833,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-board\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Welcome to Team Collaboration Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 845,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a board from the sidebar or create a new one to get started!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 796,\n    columnNumber: 5\n  }, this);\n};\n_s(TeamCollaborationBoard, \"WeiVJGUR4O7Wwfb3NZ67cVE4+vk=\");\n_c = TeamCollaborationBoard;\nexport default TeamCollaborationBoard;\nvar _c;\n$RefreshReg$(_c, \"TeamCollaborationBoard\");","map":{"version":3,"names":["React","useEffect","useState","BoardList","TaskForm","Column","BoardForm","fetchBoards","fetchTasksForBoard","jsxDEV","_jsxDEV","Fragment","_Fragment","TeamCollaborationBoard","_s","boards","setBoards","selectedBoard","setSelectedBoard","tasks","setTasks","sidebarOpen","setSidebarOpen","loadBoards","length","loadTasks","data","_id","handleBoardCreated","newBoard","handleTaskCreated","newTask","handleTaskUpdate","updatedTask","map","t","handleTaskDelete","taskId","filter","task","filteredTasks","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onBoardCreated","onSelect","name","description","boardId","onTaskCreated","title","onUpdateTask","onDeleteTask","_c","$RefreshReg$"],"sources":["C:/Users/Intel/Desktop/programs/scriptGuru/trello/src/pages/TeamCollaborationBoard.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n\r\n// const API_BASE = \"http://localhost:5000\";\r\n\r\n// // Priority colors\r\n// const PRIORITY_COLORS = {\r\n//   Low: \"#28a745\",\r\n//   Medium: \"#ffc107\",\r\n//   High: \"#dc3545\",\r\n// };\r\n\r\n// // Board component\r\n// const Board = ({ board, onSelect, isSelected }) => (\r\n//   <div\r\n//     style={{\r\n//       ...styles.boardItem,\r\n//       ...(isSelected ? styles.boardItemSelected : {}),\r\n//     }}\r\n//     onClick={() => onSelect(board)}\r\n//   >\r\n//     <h4>{board.name}</h4>\r\n//     {board.description && <p>{board.description}</p>}\r\n//   </div>\r\n// );\r\n\r\n// // Task component\r\n// const Task = ({ task, onUpdate, onDelete }) => {\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editData, setEditData] = useState({\r\n//     title: task.title,\r\n//     description: task.description,\r\n//     priority: task.priority,\r\n//     assignedTo: task.assignedTo,\r\n//     dueDate: task.dueDate ? task.dueDate.split(\"T\")[0] : \"\",\r\n//   });\r\n\r\n//   const handleSave = async () => {\r\n//     try {\r\n//       const response = await fetch(`${API_BASE}/tasks/${task._id}`, {\r\n//         method: \"PUT\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(editData),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const updatedTask = await response.json();\r\n//         onUpdate(updatedTask);\r\n//         setIsEditing(false);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error updating task:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleStatusChange = async (newStatus) => {\r\n//     try {\r\n//       const response = await fetch(`${API_BASE}/tasks/${task._id}`, {\r\n//         method: \"PUT\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify({ status: newStatus }),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const updatedTask = await response.json();\r\n//         onUpdate(updatedTask);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error updating task status:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async () => {\r\n//     if (window.confirm(\"Are you sure you want to delete this task?\")) {\r\n//       try {\r\n//         await fetch(`${API_BASE}/tasks/${task._id}`, { method: \"DELETE\" });\r\n//         onDelete(task._id);\r\n//       } catch (error) {\r\n//         console.error(\"Error deleting task:\", error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   if (isEditing) {\r\n//     return (\r\n//       <div style={{ ...styles.task, ...styles.taskEditing }}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={editData.title}\r\n//           onChange={(e) => setEditData({ ...editData, title: e.target.value })}\r\n//           placeholder=\"Task title\"\r\n//           style={styles.input}\r\n//         />\r\n//         <textarea\r\n//           value={editData.description}\r\n//           onChange={(e) =>\r\n//             setEditData({ ...editData, description: e.target.value })\r\n//           }\r\n//           placeholder=\"Description\"\r\n//           style={styles.textarea}\r\n//         />\r\n//         <select\r\n//           value={editData.priority}\r\n//           onChange={(e) =>\r\n//             setEditData({ ...editData, priority: e.target.value })\r\n//           }\r\n//           style={styles.select}\r\n//         >\r\n//           <option value=\"Low\">Low</option>\r\n//           <option value=\"Medium\">Medium</option>\r\n//           <option value=\"High\">High</option>\r\n//         </select>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={editData.assignedTo}\r\n//           onChange={(e) =>\r\n//             setEditData({ ...editData, assignedTo: e.target.value })\r\n//           }\r\n//           placeholder=\"Assigned to\"\r\n//           style={styles.input}\r\n//         />\r\n//         <input\r\n//           type=\"date\"\r\n//           value={editData.dueDate}\r\n//           onChange={(e) =>\r\n//             setEditData({ ...editData, dueDate: e.target.value })\r\n//           }\r\n//           style={styles.input}\r\n//         />\r\n//         <div style={styles.taskActions}>\r\n//           <button onClick={handleSave} style={styles.button}>\r\n//             Save\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setIsEditing(false)}\r\n//             style={styles.buttonSecondary}\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div style={styles.task}>\r\n//       <div style={styles.taskHeader}>\r\n//         <h4>{task.title}</h4>\r\n//         <span\r\n//           style={{\r\n//             ...styles.priorityBadge,\r\n//             backgroundColor: PRIORITY_COLORS[task.priority],\r\n//           }}\r\n//         >\r\n//           {task.priority}\r\n//         </span>\r\n//       </div>\r\n//       {task.description && <p>{task.description}</p>}\r\n//       {task.assignedTo && (\r\n//         <div style={styles.assignedTo}>👤 {task.assignedTo}</div>\r\n//       )}\r\n//       {task.dueDate && (\r\n//         <div style={styles.dueDate}>\r\n//           📅 {new Date(task.dueDate).toLocaleDateString()}\r\n//         </div>\r\n//       )}\r\n\r\n//       <div style={styles.taskControls}>\r\n//         <select\r\n//           value={task.status}\r\n//           onChange={(e) => handleStatusChange(e.target.value)}\r\n//           style={styles.select}\r\n//         >\r\n//           <option value=\"To Do\">To Do</option>\r\n//           <option value=\"In Progress\">In Progress</option>\r\n//           <option value=\"Done\">Done</option>\r\n//         </select>\r\n//         <button onClick={() => setIsEditing(true)} style={styles.button}>\r\n//           Edit\r\n//         </button>\r\n//         <button onClick={handleDelete} style={styles.buttonDanger}>\r\n//           Delete\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // Column component\r\n// const Column = ({ title, tasks, onUpdateTask, onDeleteTask }) => (\r\n//   <div style={styles.column}>\r\n//     <h3>{title}</h3>\r\n//     <div style={styles.tasks}>\r\n//       {tasks.map((task) => (\r\n//         <Task\r\n//           key={task._id}\r\n//           task={task}\r\n//           onUpdate={onUpdateTask}\r\n//           onDelete={onDeleteTask}\r\n//         />\r\n//       ))}\r\n//     </div>\r\n//   </div>\r\n// );\r\n\r\n// // New Task Form\r\n// const NewTaskForm = ({ boardId, onTaskCreated }) => {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n//   const [taskData, setTaskData] = useState({\r\n//     title: \"\",\r\n//     description: \"\",\r\n//     status: \"To Do\",\r\n//     priority: \"Medium\",\r\n//     assignedTo: \"\",\r\n//     dueDate: \"\",\r\n//   });\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!taskData.title.trim()) return;\r\n\r\n//     try {\r\n//       const response = await fetch(`${API_BASE}/boards/${boardId}/tasks`, {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(taskData),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const newTask = await response.json();\r\n//         onTaskCreated(newTask);\r\n//         setTaskData({\r\n//           title: \"\",\r\n//           description: \"\",\r\n//           status: \"To Do\",\r\n//           priority: \"Medium\",\r\n//           assignedTo: \"\",\r\n//           dueDate: \"\",\r\n//         });\r\n//         setIsOpen(false);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error creating task:\", error);\r\n//     }\r\n//   };\r\n\r\n//   if (!isOpen) {\r\n//     return (\r\n//       <button style={styles.newTaskBtn} onClick={() => setIsOpen(true)}>\r\n//         + Add New Task\r\n//       </button>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div style={styles.newTaskForm}>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={taskData.title}\r\n//         onChange={(e) => setTaskData({ ...taskData, title: e.target.value })}\r\n//         placeholder=\"Task title\"\r\n//         style={styles.input}\r\n//       />\r\n//       <textarea\r\n//         value={taskData.description}\r\n//         onChange={(e) =>\r\n//           setTaskData({ ...taskData, description: e.target.value })\r\n//         }\r\n//         placeholder=\"Description\"\r\n//         style={styles.textarea}\r\n//       />\r\n//       <select\r\n//         value={taskData.status}\r\n//         onChange={(e) => setTaskData({ ...taskData, status: e.target.value })}\r\n//         style={styles.select}\r\n//       >\r\n//         <option value=\"To Do\">To Do</option>\r\n//         <option value=\"In Progress\">In Progress</option>\r\n//         <option value=\"Done\">Done</option>\r\n//       </select>\r\n//       <select\r\n//         value={taskData.priority}\r\n//         onChange={(e) => setTaskData({ ...taskData, priority: e.target.value })}\r\n//         style={styles.select}\r\n//       >\r\n//         <option value=\"Low\">Low</option>\r\n//         <option value=\"Medium\">Medium</option>\r\n//         <option value=\"High\">High</option>\r\n//       </select>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={taskData.assignedTo}\r\n//         onChange={(e) =>\r\n//           setTaskData({ ...taskData, assignedTo: e.target.value })\r\n//         }\r\n//         placeholder=\"Assigned to\"\r\n//         style={styles.input}\r\n//       />\r\n//       <input\r\n//         type=\"date\"\r\n//         value={taskData.dueDate}\r\n//         onChange={(e) => setTaskData({ ...taskData, dueDate: e.target.value })}\r\n//         style={styles.input}\r\n//       />\r\n//       <div style={styles.formActions}>\r\n//         <button onClick={handleSubmit} style={styles.button}>\r\n//           Create Task\r\n//         </button>\r\n//         <button onClick={() => setIsOpen(false)} style={styles.buttonSecondary}>\r\n//           Cancel\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // New Board Form\r\n// const NewBoardForm = ({ onBoardCreated }) => {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n//   const [boardData, setBoardData] = useState({ name: \"\", description: \"\" });\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!boardData.name.trim()) return;\r\n\r\n//     try {\r\n//       const response = await fetch(`${API_BASE}/boards`, {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(boardData),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const newBoard = await response.json();\r\n//         onBoardCreated(newBoard);\r\n//         setBoardData({ name: \"\", description: \"\" });\r\n//         setIsOpen(false);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error creating board:\", error);\r\n//     }\r\n//   };\r\n\r\n//   if (!isOpen) {\r\n//     return (\r\n//       <button style={styles.newBoardBtn} onClick={() => setIsOpen(true)}>\r\n//         + New Board\r\n//       </button>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div style={styles.newBoardForm}>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={boardData.name}\r\n//         onChange={(e) => setBoardData({ ...boardData, name: e.target.value })}\r\n//         placeholder=\"Board name\"\r\n//         style={styles.input}\r\n//       />\r\n//       <textarea\r\n//         value={boardData.description}\r\n//         onChange={(e) =>\r\n//           setBoardData({ ...boardData, description: e.target.value })\r\n//         }\r\n//         placeholder=\"Board description\"\r\n//         style={styles.textarea}\r\n//       />\r\n//       <div style={styles.formActions}>\r\n//         <button onClick={handleSubmit} style={styles.button}>\r\n//           Create Board\r\n//         </button>\r\n//         <button onClick={() => setIsOpen(false)} style={styles.buttonSecondary}>\r\n//           Cancel\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const TeamCollaborationBoard = () => {\r\n//   const [boards, setBoards] = useState([]);\r\n//   const [selectedBoard, setSelectedBoard] = useState(null);\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [sidebarOpen, setSidebarOpen] = useState(true);\r\n\r\n//   // Load boards on mount\r\n//   useEffect(() => {\r\n//     const fetchBoards = async () => {\r\n//       try {\r\n//         const response = await fetch(`${API_BASE}/boards`);\r\n//         const data = await response.json();\r\n//         setBoards(data);\r\n\r\n//         // Auto-select first board if available\r\n//         if (data.length > 0 && !selectedBoard) {\r\n//           setSelectedBoard(data[0]);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching boards:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchBoards();\r\n//   }, [selectedBoard]);\r\n\r\n//   // Load tasks when board is selected\r\n//   useEffect(() => {\r\n//     if (selectedBoard) {\r\n//       const fetchTasks = async () => {\r\n//         try {\r\n//           const response = await fetch(\r\n//             `${API_BASE}/boards/${selectedBoard._id}/tasks`\r\n//           );\r\n//           const data = await response.json();\r\n//           setTasks(data);\r\n//         } catch (error) {\r\n//           console.error(\"Error fetching tasks:\", error);\r\n//         }\r\n//       };\r\n\r\n//       fetchTasks();\r\n//     }\r\n//   }, [selectedBoard]);\r\n\r\n//   const handleBoardSelect = (board) => {\r\n//     setSelectedBoard(board);\r\n//   };\r\n\r\n//   const handleBoardCreated = (newBoard) => {\r\n//     setBoards([newBoard, ...boards]);\r\n//     setSelectedBoard(newBoard);\r\n//   };\r\n\r\n//   const handleTaskCreated = (newTask) => {\r\n//     setTasks([newTask, ...tasks]);\r\n//   };\r\n\r\n//   const handleTaskUpdate = (updatedTask) => {\r\n//     setTasks(\r\n//       tasks.map((task) => (task._id === updatedTask._id ? updatedTask : task))\r\n//     );\r\n//   };\r\n\r\n//   const handleTaskDelete = (taskId) => {\r\n//     setTasks(tasks.filter((task) => task._id !== taskId));\r\n//   };\r\n\r\n//   const todoTasks = tasks.filter((task) => task.status === \"To Do\");\r\n//   const inProgressTasks = tasks.filter((task) => task.status === \"In Progress\");\r\n//   const doneTasks = tasks.filter((task) => task.status === \"Done\");\r\n\r\n//   return (\r\n//     <div style={styles.app}>\r\n//       <div\r\n//         style={{\r\n//           ...styles.sidebar,\r\n//           ...(sidebarOpen ? styles.sidebarOpen : styles.sidebarClosed),\r\n//         }}\r\n//       >\r\n//         <div style={styles.sidebarHeader}>\r\n//           <h2>Boards</h2>\r\n//           <button\r\n//             style={styles.sidebarToggle}\r\n//             onClick={() => setSidebarOpen(!sidebarOpen)}\r\n//           >\r\n//             {sidebarOpen ? \"←\" : \"→\"}\r\n//           </button>\r\n//         </div>\r\n\r\n//         {sidebarOpen && (\r\n//           <div style={styles.sidebarContent}>\r\n//             <NewBoardForm onBoardCreated={handleBoardCreated} />\r\n//             <div style={styles.boardsList}>\r\n//               {boards.map((board) => (\r\n//                 <Board\r\n//                   key={board._id}\r\n//                   board={board}\r\n//                   onSelect={handleBoardSelect}\r\n//                   isSelected={selectedBoard?._id === board._id}\r\n//                 />\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div style={styles.mainContent}>\r\n//         {selectedBoard ? (\r\n//           <>\r\n//             <div style={styles.boardHeader}>\r\n//               <h1>{selectedBoard.name}</h1>\r\n//               {selectedBoard.description && <p>{selectedBoard.description}</p>}\r\n//               <NewTaskForm\r\n//                 boardId={selectedBoard._id}\r\n//                 onTaskCreated={handleTaskCreated}\r\n//               />\r\n//             </div>\r\n\r\n//             <div style={styles.boardColumns}>\r\n//               <Column\r\n//                 title=\"To Do\"\r\n//                 tasks={todoTasks}\r\n//                 onUpdateTask={handleTaskUpdate}\r\n//                 onDeleteTask={handleTaskDelete}\r\n//               />\r\n//               <Column\r\n//                 title=\"In Progress\"\r\n//                 tasks={inProgressTasks}\r\n//                 onUpdateTask={handleTaskUpdate}\r\n//                 onDeleteTask={handleTaskDelete}\r\n//               />\r\n//               <Column\r\n//                 title=\"Done\"\r\n//                 tasks={doneTasks}\r\n//                 onUpdateTask={handleTaskUpdate}\r\n//                 onDeleteTask={handleTaskDelete}\r\n//               />\r\n//             </div>\r\n//           </>\r\n//         ) : (\r\n//           <div style={styles.noBoard}>\r\n//             <h2>Welcome to Team Collaboration Board</h2>\r\n//             <p>\r\n//               Select a board from the sidebar or create a new one to get\r\n//               started!\r\n//             </p>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const styles = {\r\n//   app: {\r\n//     display: \"flex\",\r\n//     height: \"100vh\",\r\n//     fontFamily: \"Arial, sans-serif\",\r\n//     backgroundColor: \"#f5f5f5\",\r\n//   },\r\n//   sidebar: {\r\n//     backgroundColor: \"#2c3e50\",\r\n//     color: \"white\",\r\n//     transition: \"width 0.3s ease\",\r\n//   },\r\n//   sidebarOpen: {\r\n//     width: \"300px\",\r\n//   },\r\n//   sidebarClosed: {\r\n//     width: \"60px\",\r\n//   },\r\n//   sidebarHeader: {\r\n//     display: \"flex\",\r\n//     justifyContent: \"space-between\",\r\n//     alignItems: \"center\",\r\n//     padding: \"20px\",\r\n//     borderBottom: \"1px solid #34495e\",\r\n//   },\r\n//   sidebarToggle: {\r\n//     background: \"none\",\r\n//     border: \"none\",\r\n//     color: \"white\",\r\n//     fontSize: \"18px\",\r\n//     cursor: \"pointer\",\r\n//   },\r\n//   sidebarContent: {\r\n//     padding: \"20px\",\r\n//   },\r\n//   boardsList: {\r\n//     marginTop: \"20px\",\r\n//   },\r\n//   boardItem: {\r\n//     padding: \"15px\",\r\n//     margin: \"10px 0\",\r\n//     backgroundColor: \"#34495e\",\r\n//     borderRadius: \"5px\",\r\n//     cursor: \"pointer\",\r\n//     transition: \"background-color 0.2s\",\r\n//   },\r\n//   boardItemSelected: {\r\n//     backgroundColor: \"#3498db\",\r\n//   },\r\n//   mainContent: {\r\n//     flex: 1,\r\n//     padding: \"20px\",\r\n//     overflow: \"auto\",\r\n//   },\r\n//   boardHeader: {\r\n//     marginBottom: \"30px\",\r\n//   },\r\n//   boardColumns: {\r\n//     display: \"flex\",\r\n//     gap: \"20px\",\r\n//     height: \"calc(100vh - 200px)\",\r\n//   },\r\n//   column: {\r\n//     flex: 1,\r\n//     backgroundColor: \"#ecf0f1\",\r\n//     borderRadius: \"8px\",\r\n//     padding: \"20px\",\r\n//     minHeight: \"500px\",\r\n//   },\r\n//   tasks: {\r\n//     marginTop: \"15px\",\r\n//   },\r\n//   task: {\r\n//     backgroundColor: \"white\",\r\n//     padding: \"15px\",\r\n//     marginBottom: \"10px\",\r\n//     borderRadius: \"5px\",\r\n//     boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\r\n//   },\r\n//   taskEditing: {\r\n//     border: \"2px solid #3498db\",\r\n//   },\r\n//   taskHeader: {\r\n//     display: \"flex\",\r\n//     justifyContent: \"space-between\",\r\n//     alignItems: \"center\",\r\n//     marginBottom: \"10px\",\r\n//   },\r\n//   priorityBadge: {\r\n//     padding: \"4px 8px\",\r\n//     borderRadius: \"12px\",\r\n//     fontSize: \"12px\",\r\n//     fontWeight: \"bold\",\r\n//     color: \"white\",\r\n//   },\r\n//   assignedTo: {\r\n//     fontSize: \"14px\",\r\n//     color: \"#666\",\r\n//     marginBottom: \"5px\",\r\n//   },\r\n//   dueDate: {\r\n//     fontSize: \"14px\",\r\n//     color: \"#666\",\r\n//     marginBottom: \"10px\",\r\n//   },\r\n//   taskControls: {\r\n//     display: \"flex\",\r\n//     gap: \"10px\",\r\n//     marginTop: \"10px\",\r\n//   },\r\n//   taskActions: {\r\n//     display: \"flex\",\r\n//     gap: \"10px\",\r\n//     marginTop: \"10px\",\r\n//   },\r\n//   newTaskBtn: {\r\n//     backgroundColor: \"#27ae60\",\r\n//     color: \"white\",\r\n//     border: \"none\",\r\n//     padding: \"12px 20px\",\r\n//     borderRadius: \"5px\",\r\n//     cursor: \"pointer\",\r\n//     fontSize: \"16px\",\r\n//   },\r\n//   newBoardBtn: {\r\n//     backgroundColor: \"#3498db\",\r\n//     color: \"white\",\r\n//     border: \"none\",\r\n//     padding: \"12px 20px\",\r\n//     borderRadius: \"5px\",\r\n//     cursor: \"pointer\",\r\n//     fontSize: \"16px\",\r\n//     width: \"100%\",\r\n//   },\r\n//   newTaskForm: {\r\n//     backgroundColor: \"white\",\r\n//     padding: \"20px\",\r\n//     borderRadius: \"8px\",\r\n//     boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\r\n//     marginBottom: \"20px\",\r\n//   },\r\n//   newBoardForm: {\r\n//     backgroundColor: \"#34495e\",\r\n//     padding: \"15px\",\r\n//     borderRadius: \"5px\",\r\n//     marginBottom: \"20px\",\r\n//   },\r\n//   input: {\r\n//     width: \"100%\",\r\n//     padding: \"10px\",\r\n//     marginBottom: \"10px\",\r\n//     border: \"1px solid #ddd\",\r\n//     borderRadius: \"4px\",\r\n//     fontSize: \"14px\",\r\n//   },\r\n//   textarea: {\r\n//     width: \"100%\",\r\n//     padding: \"10px\",\r\n//     marginBottom: \"10px\",\r\n//     border: \"1px solid #ddd\",\r\n//     borderRadius: \"4px\",\r\n//     fontSize: \"14px\",\r\n//     minHeight: \"80px\",\r\n//     resize: \"vertical\",\r\n//   },\r\n//   select: {\r\n//     padding: \"8px\",\r\n//     marginRight: \"10px\",\r\n//     border: \"1px solid #ddd\",\r\n//     borderRadius: \"4px\",\r\n//     fontSize: \"14px\",\r\n//   },\r\n//   formActions: {\r\n//     display: \"flex\",\r\n//     gap: \"10px\",\r\n//     marginTop: \"15px\",\r\n//   },\r\n//   button: {\r\n//     backgroundColor: \"#3498db\",\r\n//     color: \"white\",\r\n//     border: \"none\",\r\n//     padding: \"8px 16px\",\r\n//     borderRadius: \"4px\",\r\n//     cursor: \"pointer\",\r\n//     fontSize: \"14px\",\r\n//   },\r\n//   buttonSecondary: {\r\n//     backgroundColor: \"#95a5a6\",\r\n//     color: \"white\",\r\n//     border: \"none\",\r\n//     padding: \"8px 16px\",\r\n//     borderRadius: \"4px\",\r\n//     cursor: \"pointer\",\r\n//     fontSize: \"14px\",\r\n//   },\r\n//   buttonDanger: {\r\n//     backgroundColor: \"#e74c3c\",\r\n//     color: \"white\",\r\n//     border: \"none\",\r\n//     padding: \"8px 16px\",\r\n//     borderRadius: \"4px\",\r\n//     cursor: \"pointer\",\r\n//     fontSize: \"14px\",\r\n//   },\r\n//   noBoard: {\r\n//     textAlign: \"center\",\r\n//     padding: \"50px\",\r\n//     color: \"#7f8c8d\",\r\n//   },\r\n// };\r\n\r\n// export default TeamCollaborationBoard;\r\n\r\n// File: src/pages/TeamCollaborationBoard.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport BoardList from \"../components/BoardList/BoardList\";\r\nimport TaskForm from \"../components/TaskForm/TaskForm\";\r\nimport Column from \"../components/Column/Column\";\r\nimport BoardForm from \"../components/BoardForm/BoardForm\";\r\nimport { fetchBoards } from \"../api/boards\";\r\nimport { fetchTasksForBoard } from \"../api/tasks\";\r\nimport \"../styles/styles.css\";\r\n\r\nconst TeamCollaborationBoard = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const [selectedBoard, setSelectedBoard] = useState(null);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [sidebarOpen, setSidebarOpen] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const loadBoards = async () => {\r\n      const boards = await fetchBoards();\r\n      setBoards(boards);\r\n      if (boards.length > 0 && !selectedBoard) setSelectedBoard(boards[0]);\r\n    };\r\n    loadBoards();\r\n  }, [selectedBoard]);\r\n\r\n  useEffect(() => {\r\n    const loadTasks = async () => {\r\n      if (!selectedBoard) return;\r\n      const data = await fetchTasksForBoard(selectedBoard._id);\r\n      setTasks(data);\r\n    };\r\n    loadTasks();\r\n  }, [selectedBoard]);\r\n\r\n  const handleBoardCreated = (newBoard) => {\r\n    setBoards([newBoard, ...boards]);\r\n    setSelectedBoard(newBoard);\r\n  };\r\n\r\n  const handleTaskCreated = (newTask) => setTasks([newTask, ...tasks]);\r\n\r\n  const handleTaskUpdate = (updatedTask) =>\r\n    setTasks(tasks.map((t) => (t._id === updatedTask._id ? updatedTask : t)));\r\n\r\n  const handleTaskDelete = (taskId) =>\r\n    setTasks(tasks.filter((task) => task._id !== taskId));\r\n\r\n  const filteredTasks = (status) =>\r\n    tasks.filter((task) => task.status === status);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className={`sidebar ${sidebarOpen ? \"open\" : \"closed\"}`}>\r\n        <div className=\"sidebar-header\">\r\n          <h2>Boards</h2>\r\n          <button\r\n            className=\"sidebar-toggle\"\r\n            onClick={() => setSidebarOpen(!sidebarOpen)}\r\n          >\r\n            {sidebarOpen ? \"←\" : \"→\"}\r\n          </button>\r\n        </div>\r\n        {sidebarOpen && (\r\n          <div className=\"sidebar-content\">\r\n            <BoardForm onBoardCreated={handleBoardCreated} />\r\n            <BoardList\r\n              boards={boards}\r\n              onSelect={setSelectedBoard}\r\n              selectedBoard={selectedBoard}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"main-content\">\r\n        {selectedBoard ? (\r\n          <>\r\n            <div className=\"board-header\">\r\n              <h1>{selectedBoard.name}</h1>\r\n              {selectedBoard.description && <p>{selectedBoard.description}</p>}\r\n              <TaskForm\r\n                boardId={selectedBoard._id}\r\n                onTaskCreated={handleTaskCreated}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"board-columns\">\r\n              {[\"To Do\", \"In Progress\", \"Done\"].map((status) => (\r\n                <Column\r\n                  key={status}\r\n                  title={status}\r\n                  tasks={filteredTasks(status)}\r\n                  onUpdateTask={handleTaskUpdate}\r\n                  onDeleteTask={handleTaskDelete}\r\n                />\r\n              ))}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"no-board\">\r\n            <h2>Welcome to Team Collaboration Board</h2>\r\n            <p>\r\n              Select a board from the sidebar or create a new one to get\r\n              started!\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeamCollaborationBoard;\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}