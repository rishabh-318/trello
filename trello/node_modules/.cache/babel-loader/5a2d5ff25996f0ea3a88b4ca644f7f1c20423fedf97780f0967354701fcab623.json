{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import BoardList from\"../components/BoardList/BoardList\";import TaskForm from\"../components/TaskForm/TaskForm\";import Column from\"../components/Column/Column\";import BoardForm from\"../components/BoardForm/BoardForm\";import{DndContext,closestCenter}from\"@dnd-kit/core\";// import { arrayMove } from \"@dnd-kit/sortable\"; // keep only if you plan to use it\nimport{fetchBoards}from\"../api/boards\";import{fetchTasksForBoard,updateTask}from\"../api/tasks\";import\"../styles/styles.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const TeamCollaborationBoard=()=>{const[boards,setBoards]=useState([]);const[selectedBoard,setSelectedBoard]=useState(null);const[tasks,setTasks]=useState([]);const[sidebarOpen,setSidebarOpen]=useState(true);useEffect(()=>{const loadBoards=async()=>{const boards=await fetchBoards();setBoards(boards);if(boards.length>0&&!selectedBoard)setSelectedBoard(boards[0]);};loadBoards();},[selectedBoard]);useEffect(()=>{const loadTasks=async()=>{if(!selectedBoard)return;const data=await fetchTasksForBoard(selectedBoard._id);setTasks(data);};loadTasks();},[selectedBoard]);const handleBoardCreated=newBoard=>{setBoards([newBoard,...boards]);setSelectedBoard(newBoard);};const handleTaskCreated=newTask=>setTasks([newTask,...tasks]);const handleTaskUpdate=updatedTask=>setTasks(tasks.map(t=>t._id===updatedTask._id?updatedTask:t));const handleTaskDelete=taskId=>setTasks(tasks.filter(task=>task._id!==taskId));const filteredTasks=status=>tasks.filter(task=>task.status===status);const handleDragEnd=async event=>{const{active,over}=event;if(!over||!active||active.id===over.id)return;const taskId=active.id;const newStatus=over.id;const task=tasks.find(t=>t._id===taskId);if(!task||task.status===newStatus)return;const updated=await updateTask(taskId,{status:newStatus});handleTaskUpdate(updated);};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`sidebar ${sidebarOpen?\"open\":\"closed\"}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-header\",children:[sidebarOpen&&/*#__PURE__*/_jsx(\"h2\",{children:\"Boards\"}),/*#__PURE__*/_jsx(\"button\",{className:\"sidebar-toggle\",onClick:()=>setSidebarOpen(!sidebarOpen),children:sidebarOpen?\"←\":\"→\"})]}),sidebarOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-content\",children:[/*#__PURE__*/_jsx(BoardForm,{onBoardCreated:handleBoardCreated}),/*#__PURE__*/_jsx(BoardList,{boards:boards,onSelect:setSelectedBoard,selectedBoard:selectedBoard})]})]}),/*#__PURE__*/_jsx(DndContext,{collisionDetection:closestCenter,onDragEnd:handleDragEnd,children:/*#__PURE__*/_jsx(\"div\",{className:\"main-content\",children:selectedBoard?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"board-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:selectedBoard.name}),selectedBoard.description&&/*#__PURE__*/_jsx(\"p\",{children:selectedBoard.description}),/*#__PURE__*/_jsx(TaskForm,{boardId:selectedBoard._id,onTaskCreated:handleTaskCreated})]}),/*#__PURE__*/_jsx(\"div\",{className:\"board-columns\",children:[\"To Do\",\"In Progress\",\"Done\"].map(status=>/*#__PURE__*/_jsx(Column,{title:status,tasks:filteredTasks(status),onUpdateTask:handleTaskUpdate,onDeleteTask:handleTaskDelete},status))})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"no-board\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to Team Collaboration Board\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Select a board from the sidebar or create a new one to get started!\"})]})})})]});};export default TeamCollaborationBoard;","map":{"version":3,"names":["React","useEffect","useState","BoardList","TaskForm","Column","BoardForm","DndContext","closestCenter","fetchBoards","fetchTasksForBoard","updateTask","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TeamCollaborationBoard","boards","setBoards","selectedBoard","setSelectedBoard","tasks","setTasks","sidebarOpen","setSidebarOpen","loadBoards","length","loadTasks","data","_id","handleBoardCreated","newBoard","handleTaskCreated","newTask","handleTaskUpdate","updatedTask","map","t","handleTaskDelete","taskId","filter","task","filteredTasks","status","handleDragEnd","event","active","over","id","newStatus","find","updated","className","children","onClick","onBoardCreated","onSelect","collisionDetection","onDragEnd","name","description","boardId","onTaskCreated","title","onUpdateTask","onDeleteTask"],"sources":["C:/Users/Intel/Desktop/programs/scriptGuru/trello/src/pages/TeamCollaborationBoard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport BoardList from \"../components/BoardList/BoardList\";\r\nimport TaskForm from \"../components/TaskForm/TaskForm\";\r\nimport Column from \"../components/Column/Column\";\r\nimport BoardForm from \"../components/BoardForm/BoardForm\";\r\nimport { DndContext, closestCenter } from \"@dnd-kit/core\";\r\n// import { arrayMove } from \"@dnd-kit/sortable\"; // keep only if you plan to use it\r\nimport { fetchBoards } from \"../api/boards\";\r\nimport { fetchTasksForBoard, updateTask } from \"../api/tasks\";\r\nimport \"../styles/styles.css\";\r\n\r\nconst TeamCollaborationBoard = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const [selectedBoard, setSelectedBoard] = useState(null);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [sidebarOpen, setSidebarOpen] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const loadBoards = async () => {\r\n      const boards = await fetchBoards();\r\n      setBoards(boards);\r\n      if (boards.length > 0 && !selectedBoard) setSelectedBoard(boards[0]);\r\n    };\r\n    loadBoards();\r\n  }, [selectedBoard]);\r\n\r\n  useEffect(() => {\r\n    const loadTasks = async () => {\r\n      if (!selectedBoard) return;\r\n      const data = await fetchTasksForBoard(selectedBoard._id);\r\n      setTasks(data);\r\n    };\r\n    loadTasks();\r\n  }, [selectedBoard]);\r\n\r\n  const handleBoardCreated = (newBoard) => {\r\n    setBoards([newBoard, ...boards]);\r\n    setSelectedBoard(newBoard);\r\n  };\r\n\r\n  const handleTaskCreated = (newTask) => setTasks([newTask, ...tasks]);\r\n\r\n  const handleTaskUpdate = (updatedTask) =>\r\n    setTasks(tasks.map((t) => (t._id === updatedTask._id ? updatedTask : t)));\r\n\r\n  const handleTaskDelete = (taskId) =>\r\n    setTasks(tasks.filter((task) => task._id !== taskId));\r\n\r\n  const filteredTasks = (status) =>\r\n    tasks.filter((task) => task.status === status);\r\n\r\n  const handleDragEnd = async (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (!over || !active || active.id === over.id) return;\r\n\r\n    const taskId = active.id;\r\n    const newStatus = over.id;\r\n\r\n    const task = tasks.find((t) => t._id === taskId);\r\n    if (!task || task.status === newStatus) return;\r\n\r\n    const updated = await updateTask(taskId, { status: newStatus });\r\n    handleTaskUpdate(updated);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className={`sidebar ${sidebarOpen ? \"open\" : \"closed\"}`}>\r\n        <div className=\"sidebar-header\">\r\n          {sidebarOpen && <h2>Boards</h2>}\r\n\r\n          <button\r\n            className=\"sidebar-toggle\"\r\n            onClick={() => setSidebarOpen(!sidebarOpen)}\r\n          >\r\n            {sidebarOpen ? \"←\" : \"→\"}\r\n          </button>\r\n        </div>\r\n\r\n        {sidebarOpen && (\r\n          <div className=\"sidebar-content\">\r\n            <BoardForm onBoardCreated={handleBoardCreated} />\r\n\r\n            <BoardList\r\n              boards={boards}\r\n              onSelect={setSelectedBoard}\r\n              selectedBoard={selectedBoard}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\r\n        <div className=\"main-content\">\r\n          {selectedBoard ? (\r\n            <>\r\n              <div className=\"board-header\">\r\n                <h1>{selectedBoard.name}</h1>\r\n                {selectedBoard.description && (\r\n                  <p>{selectedBoard.description}</p>\r\n                )}\r\n                <TaskForm\r\n                  boardId={selectedBoard._id}\r\n                  onTaskCreated={handleTaskCreated}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"board-columns\">\r\n                {[\"To Do\", \"In Progress\", \"Done\"].map((status) => (\r\n                  <Column\r\n                    key={status}\r\n                    title={status}\r\n                    tasks={filteredTasks(status)}\r\n                    onUpdateTask={handleTaskUpdate}\r\n                    onDeleteTask={handleTaskDelete}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"no-board\">\r\n              <h2>Welcome to Team Collaboration Board</h2>\r\n              <p>\r\n                Select a board from the sidebar or create a new one to get\r\n                started!\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </DndContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeamCollaborationBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}